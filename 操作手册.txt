启动RVIZ仿真：

启动仿真程序：
（1）roslaunch ur_gazebo ur5.launch

另外打开一个终端:
（2）roslaunch ur5_moveit_config ur5_moveit_planning_execution.launch sim:=true

如果看到绿色字体 All is well! Everyone is happy! You can start planning now! 的时候，就代表启动成功了

测试：利用RViz控制仿真机械臂 

（3）roslaunch ur5_moveit_config moveit_rviz.launch config:=true

在Rviz中拖动机械臂到某个位置，并选择“planned and excute”就可以观察到机械臂在Rviz和Gazebo中同时运动

或者用第二种方法：
直接一行就搞定
roslaunch ur5_moveit_config demo.launch

UR5本体实物通信测试：

打开一个新的终端
(1) cd ~/catkin_ws
(2) source devel/setup.bash
(3) roslaunch ur_modern_driver ur5_bringup.launch robot_ip:=192.168.1.102

打开一个新的终端
(1) cd ~/catkin_ws
(2) source devel/setup.bash
(3) roslaunch ur5_moveit_config ur5_moveit_planning_execution.launch limited:=true

打开一个新的终端
(1) cd ~/catkin_ws
(2) source devel/setup.bash
(3)roslaunch ur5_moveit_config moveit_rviz.launch config:=true

如果一切正常， 你就会看到RVIZ中的UR5机械臂和实物的状态是一致的，拖动UR5机械臂实物，在RVIZ里的机械臂也会跟着运动。此时，你可以在RVIZ中用鼠标拖动机械臂到达目标位置，在planing下点击plan,如果路径规划成功即可点击execute,你就会看到UR5实物也会跟着运动到目标点。
到此，UR5本体在ROS系统上的通信和控制都建立成功了。

控制rg2：
先和UR5本体实物通信，RVIZ仿真不能控制rg2

（1）rosrun ur_control rg2_server_node.py
（2）rosservice call /rg2_gripper/grip_detect
（3）改data后面的数字就行，代表rg2的打开程度，是一个从0~110的float类型数
rosservice call /rg2_gripper/control_width "target_width:  
    data:0.0"


